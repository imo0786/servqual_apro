import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import date

# ---------- ESTILO / BRANDING ----------
PRIMARY = "#1160C7"
YELLOW  = "#FFC600"
DARK    = "#00315E"

st.set_page_config(page_title="Matriz de Seguimiento SERVQUAL - APROFAM", page_icon="‚úÖ", layout="wide")

st.markdown(
    f"""
    <style>
    .big-title {{ font-size: 1.6rem; font-weight: 800; color:{DARK}; }}
    .pill {{
        display:inline-block; padding:4px 10px; border-radius:999px;
        font-weight:600; margin-right:6px; font-size:.8rem; color:white; background:{PRIMARY};
    }}
    .metric-card {{
        border:1px solid #e9eef5; border-left:6px solid {PRIMARY};
        padding:12px 14px; border-radius:12px; background:#fff;
    }}
    .stButton>button {{
        background:{PRIMARY}; color:white; border:0; border-radius:10px; padding:8px 16px;
        font-weight:700;
    }}
    .danger>button {{ background:#d7263d!important; }}
    .soft>button {{ background:{YELLOW}!important; color:#1c1c1c!important; }}
    </style>
    """,
    unsafe_allow_html=True
)

# ---------- LOGIN SENCILLO ----------
def login(username: str, password: str) -> bool:
    return username.strip().lower() == "admin" and password == "Aprof@n2025"

if "authed" not in st.session_state:
    st.session_state.authed = False

with st.sidebar:
    st.image("https://i.imgur.com/t3w9wxs.png", use_column_width=True)
    st.markdown("<div class='big-title'>SERVQUAL ‚Ä¢ APROFAM</div>", unsafe_allow_html=True)
    st.caption("Matriz de acci√≥n y seguimiento")

    if not st.session_state.authed:
        u = st.text_input("Usuario", value="", placeholder="admin")
        p = st.text_input("Contrase√±a", value="", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
        if st.button("Ingresar"):
            st.session_state.authed = login(u, p)
            if not st.session_state.authed:
                st.error("Usuario o contrase√±a incorrectos.")
        st.stop()
    else:
        st.success("Sesi√≥n iniciada")
        if st.button("Cerrar sesi√≥n", type="primary"):
            st.session_state.clear()
            st.rerun()

# ---------- CAT√ÅLOGOS ----------
CAT_RESPONSABLES = [
    "BRYSEYDA A. ZU√ëIGA GOMEZ",
    "DANIEL ALEJANDRO MONTERROSO MORALES",
    "DARWIN RENE RODAS CHEGUEN",
    "EDWIN HAROLDO MAYEN ALVARADO",
    "EVELYN ROCIO RUIZ BARRIENTOS",
    "EYBI VINICIO BEDOYA AVILA",
    "HECTOR LEONARDO MEJIA SANCHEZ",
    "IVAN ALBERTO MOLINA ALVAREZ",
    "JENNIFER ANDREA JACOBO GALVEZ",
    "MARIO FERNANDO HERNANDEZ PINEDA",
    "MARITZA ELIZABETH CHANG GODINEZ DE VALLE",
    "MIRIAM YESENIA PAREDES QUINTEROS",
]

CAT_ESTADO = ["Pendiente", "En progreso", "Completado", "Bloqueado"]
CAT_PLAZO  = ["15 d√≠as", "30 d√≠as", "45 d√≠as", "60 d√≠as"]
CAT_DIM    = ["FIABILIDAD", "CAPACIDAD DE RESPUESTA", "SEGURIDAD", "EMPAT√çA", "ASPECTOS TANGIBLES", "EXPERIENCIA/EXPANSI√ìN"]

# 28 preguntas (c√≥digo + texto corto)
PREGUNTAS = [
    ("FIA_P001","¬øRecepci√≥n explic√≥ pasos de consulta?"),
    ("FIA_P002","¬øCaja/pago fue r√°pido?"),
    ("FIA_P003","¬øRespetaron orden y turno?"),
    ("FIA_P004","¬øDoctor explic√≥ diagn√≥stico claramente?"),
    ("FIA_P005","¬øFue f√°cil obtener su cita?"),
    ("CAP_P006","¬øAtenci√≥n r√°pida tras llegada?"),
    ("CAP_P007","¬øInformaron otros servicios APROFAM?"),
    ("CAP_P008","¬øCall center r√°pido y resolutivo?"),
    ("CAP_P009","¬øFarmacia cumpli√≥ lo esperado?"),
    ("SEG_P010","¬øM√©dico/enfermera inspiraron confianza?"),
    ("SEG_P011","¬øExamen f√≠sico completo?"),
    ("SEG_P012","¬øRespondi√≥ todas sus preguntas?"),
    ("SEG_P013","¬øInstalaciones limpias/seguras?"),
    ("SEG_P014","¬øExplicaron procedimientos claramente?"),
    ("SEG_P015","¬øExplicaron medicamentos y cuidados?"),
    ("EMP_P016","¬øTrato amable, respeto y paciencia?"),
    ("EMP_P017","¬øM√©dico mostr√≥ inter√©s real?"),
    ("EMP_P018","¬øConsejos personalizados de salud?"),
    ("TAN_P019","¬øInstalaciones accesibles y c√≥modas?"),
    ("TAN_P020","¬øRecibi√≥ recordatorios claros?"),
    ("TAN_P021","¬øEspera en servicios fue razonable?"),
    ("EXP_P022","¬øInformaron servicios extra (vacunas, etc.)?"),
    ("EXP_P023","¬øMencionaron telemedicina/virtual?"),
    ("EXP_P024","¬øServicios para atender a su familia?"),
    ("EXP_P025","¬øEncontr√≥ info confiable de APROFAM?"),
    ("EXP_P026","¬øPrecio del servicio fue justo?"),
    ("EXP_P027","¬øAPROFAM es su 1¬™ opci√≥n (lab/farma/img)?"),
    ("EXP_P028","¬øRecomendar√≠a APROFAM?"),
]
# mapa c√≥digo->dimensi√≥n (para filtrado)
MAP_DIM = {
    **{k:"FIABILIDAD" for k in ["FIA_P001","FIA_P002","FIA_P003","FIA_P004","FIA_P005"]},
    **{k:"CAPACIDAD DE RESPUESTA" for k in ["CAP_P006","CAP_P007","CAP_P008","CAP_P009"]},
    **{k:"SEGURIDAD" for k in ["SEG_P010","SEG_P011","SEG_P012","SEG_P013","SEG_P014","SEG_P015"]},
    **{k:"EMPAT√çA" for k in ["EMP_P016","EMP_P017","EMP_P018"]},
    **{k:"ASPECTOS TANGIBLES" for k in ["TAN_P019","TAN_P020","TAN_P021"]},
    **{k:"EXPERIENCIA/EXPANSI√ìN" for k in ["EXP_P022","EXP_P023","EXP_P024","EXP_P025","EXP_P026","EXP_P027","EXP_P028"]},
}

# ---------- ESTADO INICIAL DE LA MATRIZ ----------
DEFAULT_COLS = [
    "C√≥digo","Dimensi√≥n","Pregunta evaluada","Subproblema identificado","Causa ra√≠z",
    "Acci√≥n correctiva","Fecha seguimiento","Responsable","Plazo","Estado","% Avance"
]
if "df" not in st.session_state:
    st.session_state.df = pd.DataFrame(columns=DEFAULT_COLS)

# ---------- CABECERA ----------
st.markdown("<span class='big-title'>PLAN DE ACCI√ìN ‚Ä¢ MATRIZ DE SEGUIMIENTO</span>", unsafe_allow_html=True)
st.write(
    f"<span class='pill'>Total preguntas: 28</span>"
    f"<span class='pill' style='background:{YELLOW}; color:{DARK}'>Cat√°logo responsables: {len(CAT_RESPONSABLES)}</span>",
    unsafe_allow_html=True
)
st.divider()

# ---------- CONTROLES DE FILTRO ----------
c1,c2,c3,c4 = st.columns([1.2,1.2,1.2,1])
with c1:
    f_dim = st.selectbox("Filtrar por dimensi√≥n", ["Todas"]+CAT_DIM)
with c2:
    f_resp = st.selectbox("Filtrar por responsable", ["Todos"]+CAT_RESPONSABLES)
with c3:
    f_estado = st.selectbox("Filtrar por estado", ["Todos"]+CAT_ESTADO)
with c4:
    st.caption("Acciones")
    if st.button("‚ûï Agregar fila", use_container_width=True):
        # Fila vac√≠a con valores por defecto
        row = {
            "C√≥digo": "",
            "Dimensi√≥n": "",
            "Pregunta evaluada": "",
            "Subproblema identificado": "",
            "Causa ra√≠z": "",
            "Acci√≥n correctiva": "",
            "Fecha seguimiento": date.today().isoformat(),
            "Responsable": CAT_RESPONSABLES[0],
            "Plazo": CAT_PLAZO[1],
            "Estado": "Pendiente",
            "% Avance": 0,
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([row])], ignore_index=True)

# ---------- SELECTORES AMIGABLES PARA NUEVAS FILAS ----------
with st.expander("üìå Insertar nueva acci√≥n (con selectores)"):
    colA,colB = st.columns([1.2,2])
    with colA:
        opt = st.selectbox("Pregunta", options=[f"{c} ‚Äì {t}" for c,t in PREGUNTAS])
        codigo = opt.split(" ‚Äì ")[0]
        dimension = MAP_DIM[codigo]
    with colB:
        subp = st.text_input("Subproblema identificado", "")
        causa = st.text_input("Causa ra√≠z", "")
        accion = st.text_input("Acci√≥n correctiva", "")
    col1,col2,col3,col4 = st.columns(4)
    with col1:
        fecha = st.date_input("Fecha de seguimiento", value=date.today())
    with col2:
        resp = st.selectbox("Responsable", CAT_RESPONSABLES)
    with col3:
        plazo = st.selectbox("Plazo", CAT_PLAZO, index=1)
    with col4:
        estado = st.selectbox("Estado", CAT_ESTADO, index=0)
    avance = st.slider("% Avance", 0, 100, 0, 5)

    if st.button("Agregar a la matriz", type="primary"):
        row = {
            "C√≥digo": codigo,
            "Dimensi√≥n": dimension,
            "Pregunta evaluada": opt,
            "Subproblema identificado": subp,
            "Causa ra√≠z": causa,
            "Acci√≥n correctiva": accion,
            "Fecha seguimiento": fecha.isoformat(),
            "Responsable": resp,
            "Plazo": plazo,
            "Estado": estado,
            "% Avance": avance,
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([row])], ignore_index=True)
        st.success("Fila agregada.")

# ---------- APLICAR FILTROS A VISTA ----------
df_view = st.session_state.df.copy()
if f_dim != "Todas":
    df_view = df_view[df_view["Dimensi√≥n"] == f_dim]
if f_resp != "Todos":
    df_view = df_view[df_view["Responsable"] == f_resp]
if f_estado != "Todos":
    df_view = df_view[df_view["Estado"] == f_estado]

# ---------- TABLA EDITABLE ----------
st.write("### üßæ Matriz (editable)")
edited = st.data_editor(
    df_view,
    num_rows="dynamic",
    use_container_width=True,
    column_config={
        "C√≥digo": st.column_config.SelectboxColumn(options=[c for c,_ in PREGUNTAS]),
        "Dimensi√≥n": st.column_config.SelectboxColumn(options=CAT_DIM),
        "Pregunta evaluada": st.column_config.SelectboxColumn(options=[f"{c} ‚Äì {t}" for c,t in PREGUNTAS], width="large"),
        "Responsable": st.column_config.SelectboxColumn(options=CAT_RESPONSABLES),
        "Plazo": st.column_config.SelectboxColumn(options=CAT_PLAZO),
        "Estado": st.column_config.SelectboxColumn(options=CAT_ESTADO),
        "% Avance": st.column_config.NumberColumn(format="%.0f", min_value=0, max_value=100, step=5),
        "Fecha seguimiento": st.column_config.DateColumn(),
    },
    hide_index=True
)

# Sincroniza cambios de la vista con el dataframe global
# (reemplaza √∫nicamente el subconjunto filtrado)
if not edited.equals(df_view):
    # Localiza √≠ndices globales de las filas que est√°n en la vista
    idx_global = st.session_state.df.index[df_view.index]
    st.session_state.df.loc[idx_global, :] = edited.values

# ---------- ELIMINAR FILAS SELECCIONADAS ----------
with st.expander("üóëÔ∏è Eliminar filas"):
    if len(st.session_state.df) == 0:
        st.info("No hay filas en la matriz.")
    else:
        to_delete = st.multiselect(
            "Selecciona por √≠ndice para eliminar",
            options=list(st.session_state.df.index),
            help="√çndices del dataframe completo"
        )
        if st.button("Eliminar seleccionadas", type="primary", key="del", help="Acci√≥n irreversible", kwargs={},):
            st.session_state.df.drop(index=to_delete, inplace=True)
            st.session_state.df.reset_index(drop=True, inplace=True)
            st.success("Filas eliminadas.")

# ---------- EXPORTAR A EXCEL ----------
def to_excel_bytes(df: pd.DataFrame) -> bytes:
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Matriz")
    return buffer.getvalue()

colL, colR = st.columns([1,1])
with colL:
    st.download_button(
        "‚¨áÔ∏è Exportar a Excel",
        data=to_excel_bytes(st.session_state.df),
        file_name="matriz_servqual_aprofam.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
with colR:
    st.caption("Consejo: guarda tu Excel como respaldo peri√≥dico de seguimiento.")
